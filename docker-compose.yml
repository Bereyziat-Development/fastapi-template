# services:
#   proxy:
#     image: traefik:3.2
#     container_name: name
#     networks:
#       - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#       - default
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     command:
#       - --providers.swarm=true
#       - --providers.docker.constraints=Label(traefik.constraint-label-stack, ${TRAEFIK_TAG?Variable not set})
#       - --providers.swarm.exposedbydefault=false
#       - --accesslog=true
#       - --log=true
#       - --api.dashboard=true
#       - --entrypoints.web.address=:80
#       - --entrypoints.websecure.address=:443
#       - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set}
#       - --certificatesresolvers.le.acme.storage=/acme.json
#       - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
#     deploy:
#       placement:
#         constraints:
#           - node.role == manager
#       labels:
#         - traefik.enable=true
#         - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#         - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
#         - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
#         - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(${DOMAIN?Variable not set}) || Host(www.${DOMAIN?Variable not set})
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(${DOMAIN?Variable not set}) || Host(www.${DOMAIN?Variable not set})
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
#         - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
#         - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
#         - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
#         - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
#   db:
#     image: postgres:17
#     volumes:
#       - app-db-data:/var/lib/postgresql/data/pgdata
#     env_file:
#       - .env
#     environment:
#       - PGDATA=/var/lib/postgresql/data/pgdata
#     deploy:
#       placement:
#         constraints:
#           - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

#   backend:
#     image: ${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}
#     build:
#       context: .
#       dockerfile: backend.dockerfile
#       args:
#         ENV_CONFIG: ${ENV_CONFIG-dev}
#     env_file:
#       - .env
#     volumes:
#       - app-file-storage:/app/files
#     environment:
#       - ENV_CONFIG=${ENV_CONFIG-dev}
#       - SERVER_NAME=${DOMAIN?Variable not set}
#       - SERVER_HOST=http://${DOMAIN?Variable not set}
#     networks:
#       - default
#       - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#       - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
#       - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`)
#       - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=web
#       - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

#   pgadmin:
#     image: dpage/pgadmin4:latest
#     env_file:
#       - .env
#     networks:
#       - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#       - default
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#       - traefik.http.routers.pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
#       - traefik.http.routers.pgadmin-http.entrypoints=web
#       - traefik.http.routers.pgadmin-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
#       - traefik.http.routers.pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
#       - traefik.http.routers.pgadmin-https.entrypoints=websecure
#       - traefik.http.routers.pgadmin-https.tls=true
#       - traefik.http.routers.pgadmin-https.tls.certresolver=le

# volumes:
#   app-db-data:
#   app-file-storage:

# networks:
#   traefik-public:
#     external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}

services:

  traefik:
    image: "traefik:v3.2"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.swarm=true"
      - "--providers.swarm.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=jonathan@bereyziat.dev"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - published: 443
        target: 443
        protocol: tcp
      - published: 8080
        target: 8080
        protocol: tcp
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`service.lestario.com`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"