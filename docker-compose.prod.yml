services:
  proxy:
    image: "traefik:v3.2.3"
    command:
    # TODO: see what timeouts can be removed
      - --entryPoints.name.transport.respondingTimeouts.readTimeout="${BACKEND_TIMEOUT}s? 120s}"
      - --serversTransport.forwardingTimeouts.dialTimeout="${BACKEND_TIMEOUT}s? 60s}"
      - --serversTransport.forwardingTimeouts.responseHeaderTimeout="${BACKEND_TIMEOUT}s? 120s}"
      - --serversTransport.forwardingTimeouts.idleConnTimeout="${BACKEND_TIMEOUT}s? 120s}"
      - --tcpServersTransport.dialTimeout="${BACKEND_TIMEOUT}s? 60s}"
      - --log.level=DEBUG # Optional, helps in debugging
      - --api.insecure=true # Enable Traefik dashboard (accessible at :8080)
      - --providers.docker=true # Enable Docker provider
      - --providers.docker.httpClientTimeout="${BACKEND_TIMEOUT}s? 60s}"
      - --providers.docker.exposedbydefault=false # Prevents exposing all services by default
      - --entryPoints.websecure.address=:443" # Define the HTTPS entry point
      - --entryPoints.traefik.transport.respondingTimeouts.readTimeout="${BACKEND_TIMEOUT}s? 120s}"
      - --entryPoints.websecure.transport.respondingTimeouts.readTimeout="${BACKEND_TIMEOUT}s? 120s}"
      - --certificatesresolvers.myresolver.acme.tlschallenge=true # Enable TLS challenge for Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}" # Email for Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Store cert data in a file
    ports:
      - "443:443" # HTTPS
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Access Docker socket
      - "./letsencrypt:/letsencrypt" # Persist Let's Encrypt data
    networks:
      - default
      # - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN?Variable not set}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal" # Expose Traefik's dashboard over HTTPS

      # Backend service
  backend:
    image: "${STACK_NAME}-backend:latest"
    build:
      dockerfile: backend.dockerfile
      args:
        TAG: ${TAG-dev}
    env_file:
      - .env
    volumes: 
      - app-file-storage:/app/app/files # Uncomment to persist files (recommended to use an S3 bucket instead for production)
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
    networks:
      - default
      # - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN?Variable not set}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=80"

    command: /start.sh

  # Database service (PostgreSQL)
  db:
    image: postgres:17
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    networks:
      - default
      # - traefik-public
  
  # PGAdmin service
  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - .env
    networks:
      - default
      # - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
      - "traefik.http.services.${STACK_NAME?Variable not set}-pgadmin.loadbalancer.server.port=5050"

networks:
  traefik-public:
    driver: overlay
    attachable: true

volumes:
  app-db-data:
  app-file-storage: # Uncomment to persist files (recommended to use an S3 bucket instead for production)